import tensorflow as tf #tensorflow를 tf로 import
import numpy as np #numpy를 np로 지정
tf.enable_eager_execution() #즉시실행을 위해 eager_execution로 활성화

# Random
tf.set_random_seed(0) # 다음에 재현해도 동일한 재현을 위해 for reproductubility random_seed를 초기화

# data and label
x1 = [ 73.,  93.,  89.,  96.,  73.]  # x1,x2,x3에 학습된 값 지정 
x2 = [ 80.,  88.,  91.,  98.,  66.]
x3 = [ 75.,  93.,  90., 100.,  70.]
Y  = [152., 185., 180., 196., 142.] # 예측 데이터(=정답)

# random weights
w1 = tf.Variable(tf.random_normal([1])) # w1,w2,w3에 대해 초기값 1 지정
w2 = tf.Variable(tf.random_normal([1])) #아무 값을 넣어도 관계 없음
w3 = tf.Variable(tf.random_normal([1]))
b  = tf.Variable(tf.random_normal([1]))

learning_rate = 0.000001 # 0.000001로 learning_rate값 지정

for i in range(1000+1): # 1001번의 업데이트 수행
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape: #GradientTape 이용 
        hypothesis = w1 * x1 +  w2 * x2 + w3 * x3 + b #가설
        cost = tf.reduce_mean(tf.square(hypothesis - Y)) # 가설 - 레이블 데이터(=오차) 제곱의 평균 값 = cost
    # calculates the gradients of the cost
    w1_grad, w2_grad, w3_grad, b_grad = tape.gradient(cost, [w1, w2, w3, b]) # 변수들에 대한 4개의 기울기 값을 구한다.
    
    # update w1,w2,w3 and b
    w1.assign_sub(learning_rate * w1_grad) # 4개의 gradient값에 learning_rate를 각각 곱한후 업데이트
    w2.assign_sub(learning_rate * w2_grad)
    w3.assign_sub(learning_rate * w3_grad)
    b.assign_sub(learning_rate * b_grad)

    if i % 50 == 0: # 50번에 1번씩 출력
      print("{:5} | {:12.4f}".format(i, cost.numpy()))
    
#    i       cost
    0 |   11325.9121
   50 |     135.3618 # cost 값(매우 큰 값 -> 일정한 값)
  100 |      11.1817
  150 |       9.7940
  200 |       9.7687
  250 |       9.7587
  300 |       9.7489
  350 |       9.7389
  400 |       9.7292
  450 |       9.7194
  500 |       9.7096
  550 |       9.6999
  600 |       9.6903
  650 |       9.6806
  700 |       9.6709
  750 |       9.6612
  800 |       9.6517
  850 |       9.6421
  900 |       9.6325
  950 |       9.6229
 1000 |       9.6134

# Matrix #간결한 표현 가능
 data = np.array([
    # X1,   X2,    X3,   y
    [ 73.,  80.,  75., 152. ], #각 변수에 대해 데이터 지정 (5행 3열)
    [ 93.,  88.,  93., 185. ],
    [ 89.,  91.,  90., 180. ],
    [ 96.,  98., 100., 196. ],
    [ 73.,  66.,  70., 142. ]
], dtype=np.float32)

# slice data
X = data[:, :-1] # numpy의 슬라이싱으로 데이터를 잘라냄, (행):(열)이므로 마지막컬럼은 포함시키지 않음 따라서 5행 3열
y = data[:, [-1]] # 전체 행과 마지막 컬럼을 의미

W = tf.Variable(tf.random_normal([3, 1])) # W의 행 수는 3, 출력값은 1
b = tf.Variable(tf.random_normal([1])) # b는 1

learning_rate = 0.000001 #작은 상수 값으로 learning_rate 지정

# hypothesis, prediction function
def predict(X):         #예측함수는 X,W로 정의 (추후에 b 생략 가능)
    return tf.matmul(X, W) + b   

print("epoch | cost") #출력값

n_epochs = 2000 #n_epochs를 2000번으로 지정     
for i in range(n_epochs+1): #총 2001번의 순회
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape: #tape를 사용하여 변수기록
        cost = tf.reduce_mean((tf.square(predict(X) - y))) #cost함수 정의 

    # calculates the gradients of the loss
    W_grad, b_grad = tape.gradient(cost, [W, b]) #learning rate값에 따라 W,b 업데이트

    # updates parameters (W and b)
    W.assign_sub(learning_rate * W_grad) # W와 b 값을 지속적으로 업데이트
    b.assign_sub(learning_rate * b_grad)
    
    if i % 100 == 0: #100번에 한 번 씩 출력
        print("{:5} | {:10.4f}".format(i, cost.numpy()))
        
           
   epoch | cost
    0 |  5455.5903 #cost값(큰 값 -> 3점대의 최적화)
  100 |    31.7443 #결과적으로, 매트릭스를 사용하는 것이 효율적
  200 |    30.9326
  300 |    30.7894
  400 |    30.6468
  500 |    30.5055
  600 |    30.3644
  700 |    30.2242
  800 |    30.0849
  900 |    29.9463
 1000 |    29.8081
 1100 |    29.6710
 1200 |    29.5348
 1300 |    29.3989
 1400 |    29.2641
 1500 |    29.1299
 1600 |    28.9961
 1700 |    28.8634
 1800 |    28.7313
 1900 |    28.5997
 2000 |    28.4689
